{\rtf1\ansi\ansicpg1251\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs26 \cf0 //\uc0\u1041 \u1080 \u1085 \u1072 \u1088 \u1085 \u1072 \u1103  \u1082 \u1091 \u1095 \u1072  (binary heap)\
\
class BinaryHeap:\
    def __init__(self):\
        self.a = []\
\
    def _sift_up(self, i):\
        while i > 0:\
            p = (i - 1) // 2\
            if self.a[i] < self.a[p]:\
                self.a[i], self.a[p] = self.a[p], self.a[i]\
                i = p\
            else:\
                break\
\
//\uc0\u1041 \u1080 \u1085 \u1086 \u1084 \u1080 \u1085 \u1072 \u1083 \u1100 \u1085 \u1072 \u1103  \u1082 \u1091 \u1095 \u1072  \
class BinomialHeap:\
    def __init__(self):\
        self.trees = []\
\
heap = BinomialHeap()\
print("BinomialHeap initialized")\
\
//\uc0\u1050 \u1091 \u1095 \u1072  \u1060 \u1080 \u1073 \u1086 \u1085 \u1072 \u1095 \u1095 \u1080  \
class FibonacciHeap:\
    def __init__(self):\
        self.min_node = None\
        self.trees = []}